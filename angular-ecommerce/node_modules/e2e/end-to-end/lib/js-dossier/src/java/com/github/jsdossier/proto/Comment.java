/*
 Copyright 2013-2015 Jason Leyba

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dossier.proto

package com.github.jsdossier.proto;

/**
 * Protobuf type {@code dossier.Comment}
 *
 * <pre>
 * Represents a tokenized JSDoc comment string. Each token represents pre-formatted
 * HTML, literal text, a link, or a link of literal text.
 * </pre>
 */
public final class Comment extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:dossier.Comment)
    CommentOrBuilder {
  // Use Comment.newBuilder() to construct.
  private Comment(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private Comment(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

  private static final Comment defaultInstance;
  public static Comment getDefaultInstance() {
    return defaultInstance;
  }

  public Comment getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final com.google.protobuf.UnknownFieldSet unknownFields;
  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
    return this.unknownFields;
  }
  private Comment(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              token_ = new java.util.ArrayList<com.github.jsdossier.proto.Comment.Token>();
              mutable_bitField0_ |= 0x00000001;
            }
            token_.add(input.readMessage(com.github.jsdossier.proto.Comment.Token.PARSER, extensionRegistry));
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        token_ = java.util.Collections.unmodifiableList(token_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.github.jsdossier.proto.Dossier.internal_static_dossier_Comment_descriptor;
  }

  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.github.jsdossier.proto.Dossier.internal_static_dossier_Comment_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.github.jsdossier.proto.Comment.class, com.github.jsdossier.proto.Comment.Builder.class);
  }

  public static com.google.protobuf.Parser<Comment> PARSER =
      new com.google.protobuf.AbstractParser<Comment>() {
    public Comment parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Comment(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public com.google.protobuf.Parser<Comment> getParserForType() {
    return PARSER;
  }

  public interface TokenOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dossier.Comment.Token)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string text = 1;</code>
     *
     * <pre>
     * The text content for this token; text should be escaped when rendered.
     * </pre>
     */
    boolean hasText();
    /**
     * <code>optional string text = 1;</code>
     *
     * <pre>
     * The text content for this token; text should be escaped when rendered.
     * </pre>
     */
    java.lang.String getText();
    /**
     * <code>optional string text = 1;</code>
     *
     * <pre>
     * The text content for this token; text should be escaped when rendered.
     * </pre>
     */
    com.google.protobuf.ByteString
        getTextBytes();

    /**
     * <code>optional string html = 6;</code>
     *
     * <pre>
     * The pre-escaped html content for this token.
     * </pre>
     */
    boolean hasHtml();
    /**
     * <code>optional string html = 6;</code>
     *
     * <pre>
     * The pre-escaped html content for this token.
     * </pre>
     */
    java.lang.String getHtml();
    /**
     * <code>optional string html = 6;</code>
     *
     * <pre>
     * The pre-escaped html content for this token.
     * </pre>
     */
    com.google.protobuf.ByteString
        getHtmlBytes();

    /**
     * <code>optional string href = 4;</code>
     *
     * <pre>
     * If set, this token will be rendered as a hyperlink.
     * </pre>
     */
    boolean hasHref();
    /**
     * <code>optional string href = 4;</code>
     *
     * <pre>
     * If set, this token will be rendered as a hyperlink.
     * </pre>
     */
    java.lang.String getHref();
    /**
     * <code>optional string href = 4;</code>
     *
     * <pre>
     * If set, this token will be rendered as a hyperlink.
     * </pre>
     */
    com.google.protobuf.ByteString
        getHrefBytes();
  }
  /**
   * Protobuf type {@code dossier.Comment.Token}
   */
  public static final class Token extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dossier.Comment.Token)
      TokenOrBuilder {
    // Use Token.newBuilder() to construct.
    private Token(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Token(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Token defaultInstance;
    public static Token getDefaultInstance() {
      return defaultInstance;
    }

    public Token getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Token(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              contentCase_ = 1;
              content_ = bs;
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              href_ = bs;
              break;
            }
            case 50: {
              com.google.protobuf.ByteString bs = input.readBytes();
              contentCase_ = 6;
              content_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.jsdossier.proto.Dossier.internal_static_dossier_Comment_Token_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.jsdossier.proto.Dossier.internal_static_dossier_Comment_Token_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.jsdossier.proto.Comment.Token.class, com.github.jsdossier.proto.Comment.Token.Builder.class);
    }

    public static com.google.protobuf.Parser<Token> PARSER =
        new com.google.protobuf.AbstractParser<Token>() {
      public Token parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Token(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Token> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int contentCase_ = 0;
    private java.lang.Object content_;
    public enum ContentCase
        implements com.google.protobuf.Internal.EnumLite {
      TEXT(1),
      HTML(6),
      CONTENT_NOT_SET(0);
      private int value = 0;
      private ContentCase(int value) {
        this.value = value;
      }
      public static ContentCase valueOf(int value) {
        switch (value) {
          case 1: return TEXT;
          case 6: return HTML;
          case 0: return CONTENT_NOT_SET;
          default: throw new java.lang.IllegalArgumentException(
            "Value is undefined for this oneof enum.");
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ContentCase
    getContentCase() {
      return ContentCase.valueOf(
          contentCase_);
    }

    public static final int TEXT_FIELD_NUMBER = 1;
    /**
     * <code>optional string text = 1;</code>
     *
     * <pre>
     * The text content for this token; text should be escaped when rendered.
     * </pre>
     */
    public boolean hasText() {
      return contentCase_ == 1;
    }
    /**
     * <code>optional string text = 1;</code>
     *
     * <pre>
     * The text content for this token; text should be escaped when rendered.
     * </pre>
     */
    public java.lang.String getText() {
      java.lang.Object ref = "";
      if (contentCase_ == 1) {
        ref = content_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8() && (contentCase_ == 1)) {
          content_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string text = 1;</code>
     *
     * <pre>
     * The text content for this token; text should be escaped when rendered.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTextBytes() {
      java.lang.Object ref = "";
      if (contentCase_ == 1) {
        ref = content_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (contentCase_ == 1) {
          content_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int HTML_FIELD_NUMBER = 6;
    /**
     * <code>optional string html = 6;</code>
     *
     * <pre>
     * The pre-escaped html content for this token.
     * </pre>
     */
    public boolean hasHtml() {
      return contentCase_ == 6;
    }
    /**
     * <code>optional string html = 6;</code>
     *
     * <pre>
     * The pre-escaped html content for this token.
     * </pre>
     */
    public java.lang.String getHtml() {
      java.lang.Object ref = "";
      if (contentCase_ == 6) {
        ref = content_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8() && (contentCase_ == 6)) {
          content_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string html = 6;</code>
     *
     * <pre>
     * The pre-escaped html content for this token.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getHtmlBytes() {
      java.lang.Object ref = "";
      if (contentCase_ == 6) {
        ref = content_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (contentCase_ == 6) {
          content_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int HREF_FIELD_NUMBER = 4;
    private java.lang.Object href_;
    /**
     * <code>optional string href = 4;</code>
     *
     * <pre>
     * If set, this token will be rendered as a hyperlink.
     * </pre>
     */
    public boolean hasHref() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string href = 4;</code>
     *
     * <pre>
     * If set, this token will be rendered as a hyperlink.
     * </pre>
     */
    public java.lang.String getHref() {
      java.lang.Object ref = href_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          href_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string href = 4;</code>
     *
     * <pre>
     * If set, this token will be rendered as a hyperlink.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getHrefBytes() {
      java.lang.Object ref = href_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        href_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      href_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (contentCase_ == 1) {
        output.writeBytes(1, getTextBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(4, getHrefBytes());
      }
      if (contentCase_ == 6) {
        output.writeBytes(6, getHtmlBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (contentCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getTextBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getHrefBytes());
      }
      if (contentCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, getHtmlBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.github.jsdossier.proto.Comment.Token parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.jsdossier.proto.Comment.Token parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.jsdossier.proto.Comment.Token parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.jsdossier.proto.Comment.Token parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.jsdossier.proto.Comment.Token parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.github.jsdossier.proto.Comment.Token parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.github.jsdossier.proto.Comment.Token parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.github.jsdossier.proto.Comment.Token parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.github.jsdossier.proto.Comment.Token parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.github.jsdossier.proto.Comment.Token parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.github.jsdossier.proto.Comment.Token prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dossier.Comment.Token}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dossier.Comment.Token)
        com.github.jsdossier.proto.Comment.TokenOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.github.jsdossier.proto.Dossier.internal_static_dossier_Comment_Token_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.github.jsdossier.proto.Dossier.internal_static_dossier_Comment_Token_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.github.jsdossier.proto.Comment.Token.class, com.github.jsdossier.proto.Comment.Token.Builder.class);
      }

      // Construct using com.github.jsdossier.proto.Comment.Token.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        href_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        contentCase_ = 0;
        content_ = null;
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.github.jsdossier.proto.Dossier.internal_static_dossier_Comment_Token_descriptor;
      }

      public com.github.jsdossier.proto.Comment.Token getDefaultInstanceForType() {
        return com.github.jsdossier.proto.Comment.Token.getDefaultInstance();
      }

      public com.github.jsdossier.proto.Comment.Token build() {
        com.github.jsdossier.proto.Comment.Token result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.github.jsdossier.proto.Comment.Token buildPartial() {
        com.github.jsdossier.proto.Comment.Token result = new com.github.jsdossier.proto.Comment.Token(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (contentCase_ == 1) {
          result.content_ = content_;
        }
        if (contentCase_ == 6) {
          result.content_ = content_;
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.href_ = href_;
        result.bitField0_ = to_bitField0_;
        result.contentCase_ = contentCase_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.github.jsdossier.proto.Comment.Token) {
          return mergeFrom((com.github.jsdossier.proto.Comment.Token)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.github.jsdossier.proto.Comment.Token other) {
        if (other == com.github.jsdossier.proto.Comment.Token.getDefaultInstance()) return this;
        if (other.hasHref()) {
          bitField0_ |= 0x00000004;
          href_ = other.href_;
          onChanged();
        }
        switch (other.getContentCase()) {
          case TEXT: {
            contentCase_ = 1;
            content_ = other.content_;
            onChanged();
            break;
          }
          case HTML: {
            contentCase_ = 6;
            content_ = other.content_;
            onChanged();
            break;
          }
          case CONTENT_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.github.jsdossier.proto.Comment.Token parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.github.jsdossier.proto.Comment.Token) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int contentCase_ = 0;
      private java.lang.Object content_;
      public ContentCase
          getContentCase() {
        return ContentCase.valueOf(
            contentCase_);
      }

      public Builder clearContent() {
        contentCase_ = 0;
        content_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      /**
       * <code>optional string text = 1;</code>
       *
       * <pre>
       * The text content for this token; text should be escaped when rendered.
       * </pre>
       */
      public boolean hasText() {
        return contentCase_ == 1;
      }
      /**
       * <code>optional string text = 1;</code>
       *
       * <pre>
       * The text content for this token; text should be escaped when rendered.
       * </pre>
       */
      public java.lang.String getText() {
        java.lang.Object ref = "";
        if (contentCase_ == 1) {
          ref = content_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (contentCase_ == 1) {
            if (bs.isValidUtf8()) {
              content_ = s;
            }
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string text = 1;</code>
       *
       * <pre>
       * The text content for this token; text should be escaped when rendered.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTextBytes() {
        java.lang.Object ref = "";
        if (contentCase_ == 1) {
          ref = content_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (contentCase_ == 1) {
            content_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string text = 1;</code>
       *
       * <pre>
       * The text content for this token; text should be escaped when rendered.
       * </pre>
       */
      public Builder setText(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  contentCase_ = 1;
        content_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string text = 1;</code>
       *
       * <pre>
       * The text content for this token; text should be escaped when rendered.
       * </pre>
       */
      public Builder clearText() {
        if (contentCase_ == 1) {
          contentCase_ = 0;
          content_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional string text = 1;</code>
       *
       * <pre>
       * The text content for this token; text should be escaped when rendered.
       * </pre>
       */
      public Builder setTextBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  contentCase_ = 1;
        content_ = value;
        onChanged();
        return this;
      }

      /**
       * <code>optional string html = 6;</code>
       *
       * <pre>
       * The pre-escaped html content for this token.
       * </pre>
       */
      public boolean hasHtml() {
        return contentCase_ == 6;
      }
      /**
       * <code>optional string html = 6;</code>
       *
       * <pre>
       * The pre-escaped html content for this token.
       * </pre>
       */
      public java.lang.String getHtml() {
        java.lang.Object ref = "";
        if (contentCase_ == 6) {
          ref = content_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (contentCase_ == 6) {
            if (bs.isValidUtf8()) {
              content_ = s;
            }
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string html = 6;</code>
       *
       * <pre>
       * The pre-escaped html content for this token.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getHtmlBytes() {
        java.lang.Object ref = "";
        if (contentCase_ == 6) {
          ref = content_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (contentCase_ == 6) {
            content_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string html = 6;</code>
       *
       * <pre>
       * The pre-escaped html content for this token.
       * </pre>
       */
      public Builder setHtml(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  contentCase_ = 6;
        content_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string html = 6;</code>
       *
       * <pre>
       * The pre-escaped html content for this token.
       * </pre>
       */
      public Builder clearHtml() {
        if (contentCase_ == 6) {
          contentCase_ = 0;
          content_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional string html = 6;</code>
       *
       * <pre>
       * The pre-escaped html content for this token.
       * </pre>
       */
      public Builder setHtmlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  contentCase_ = 6;
        content_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object href_ = "";
      /**
       * <code>optional string href = 4;</code>
       *
       * <pre>
       * If set, this token will be rendered as a hyperlink.
       * </pre>
       */
      public boolean hasHref() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string href = 4;</code>
       *
       * <pre>
       * If set, this token will be rendered as a hyperlink.
       * </pre>
       */
      public java.lang.String getHref() {
        java.lang.Object ref = href_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            href_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string href = 4;</code>
       *
       * <pre>
       * If set, this token will be rendered as a hyperlink.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getHrefBytes() {
        java.lang.Object ref = href_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          href_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string href = 4;</code>
       *
       * <pre>
       * If set, this token will be rendered as a hyperlink.
       * </pre>
       */
      public Builder setHref(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        href_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string href = 4;</code>
       *
       * <pre>
       * If set, this token will be rendered as a hyperlink.
       * </pre>
       */
      public Builder clearHref() {
        bitField0_ = (bitField0_ & ~0x00000004);
        href_ = getDefaultInstance().getHref();
        onChanged();
        return this;
      }
      /**
       * <code>optional string href = 4;</code>
       *
       * <pre>
       * If set, this token will be rendered as a hyperlink.
       * </pre>
       */
      public Builder setHrefBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        href_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dossier.Comment.Token)
    }

    static {
      defaultInstance = new Token(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dossier.Comment.Token)
  }

  public static final int TOKEN_FIELD_NUMBER = 1;
  private java.util.List<com.github.jsdossier.proto.Comment.Token> token_;
  /**
   * <code>repeated .dossier.Comment.Token token = 1;</code>
   *
   * <pre>
   * The tokens that comprise this comment.
   * </pre>
   */
  public java.util.List<com.github.jsdossier.proto.Comment.Token> getTokenList() {
    return token_;
  }
  /**
   * <code>repeated .dossier.Comment.Token token = 1;</code>
   *
   * <pre>
   * The tokens that comprise this comment.
   * </pre>
   */
  public java.util.List<? extends com.github.jsdossier.proto.Comment.TokenOrBuilder> 
      getTokenOrBuilderList() {
    return token_;
  }
  /**
   * <code>repeated .dossier.Comment.Token token = 1;</code>
   *
   * <pre>
   * The tokens that comprise this comment.
   * </pre>
   */
  public int getTokenCount() {
    return token_.size();
  }
  /**
   * <code>repeated .dossier.Comment.Token token = 1;</code>
   *
   * <pre>
   * The tokens that comprise this comment.
   * </pre>
   */
  public com.github.jsdossier.proto.Comment.Token getToken(int index) {
    return token_.get(index);
  }
  /**
   * <code>repeated .dossier.Comment.Token token = 1;</code>
   *
   * <pre>
   * The tokens that comprise this comment.
   * </pre>
   */
  public com.github.jsdossier.proto.Comment.TokenOrBuilder getTokenOrBuilder(
      int index) {
    return token_.get(index);
  }

  private void initFields() {
    token_ = java.util.Collections.emptyList();
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    for (int i = 0; i < token_.size(); i++) {
      output.writeMessage(1, token_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < token_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, token_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static com.github.jsdossier.proto.Comment parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.jsdossier.proto.Comment parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.jsdossier.proto.Comment parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.jsdossier.proto.Comment parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.jsdossier.proto.Comment parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.github.jsdossier.proto.Comment parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static com.github.jsdossier.proto.Comment parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static com.github.jsdossier.proto.Comment parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static com.github.jsdossier.proto.Comment parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.github.jsdossier.proto.Comment parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(com.github.jsdossier.proto.Comment prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code dossier.Comment}
   *
   * <pre>
   * Represents a tokenized JSDoc comment string. Each token represents pre-formatted
   * HTML, literal text, a link, or a link of literal text.
   * </pre>
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:dossier.Comment)
      com.github.jsdossier.proto.CommentOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.jsdossier.proto.Dossier.internal_static_dossier_Comment_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.jsdossier.proto.Dossier.internal_static_dossier_Comment_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.jsdossier.proto.Comment.class, com.github.jsdossier.proto.Comment.Builder.class);
    }

    // Construct using com.github.jsdossier.proto.Comment.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        getTokenFieldBuilder();
      }
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      if (tokenBuilder_ == null) {
        token_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        tokenBuilder_.clear();
      }
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.github.jsdossier.proto.Dossier.internal_static_dossier_Comment_descriptor;
    }

    public com.github.jsdossier.proto.Comment getDefaultInstanceForType() {
      return com.github.jsdossier.proto.Comment.getDefaultInstance();
    }

    public com.github.jsdossier.proto.Comment build() {
      com.github.jsdossier.proto.Comment result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.github.jsdossier.proto.Comment buildPartial() {
      com.github.jsdossier.proto.Comment result = new com.github.jsdossier.proto.Comment(this);
      int from_bitField0_ = bitField0_;
      if (tokenBuilder_ == null) {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          token_ = java.util.Collections.unmodifiableList(token_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.token_ = token_;
      } else {
        result.token_ = tokenBuilder_.build();
      }
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.github.jsdossier.proto.Comment) {
        return mergeFrom((com.github.jsdossier.proto.Comment)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.github.jsdossier.proto.Comment other) {
      if (other == com.github.jsdossier.proto.Comment.getDefaultInstance()) return this;
      if (tokenBuilder_ == null) {
        if (!other.token_.isEmpty()) {
          if (token_.isEmpty()) {
            token_ = other.token_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureTokenIsMutable();
            token_.addAll(other.token_);
          }
          onChanged();
        }
      } else {
        if (!other.token_.isEmpty()) {
          if (tokenBuilder_.isEmpty()) {
            tokenBuilder_.dispose();
            tokenBuilder_ = null;
            token_ = other.token_;
            bitField0_ = (bitField0_ & ~0x00000001);
            tokenBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getTokenFieldBuilder() : null;
          } else {
            tokenBuilder_.addAllMessages(other.token_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.github.jsdossier.proto.Comment parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.github.jsdossier.proto.Comment) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<com.github.jsdossier.proto.Comment.Token> token_ =
      java.util.Collections.emptyList();
    private void ensureTokenIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        token_ = new java.util.ArrayList<com.github.jsdossier.proto.Comment.Token>(token_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        com.github.jsdossier.proto.Comment.Token, com.github.jsdossier.proto.Comment.Token.Builder, com.github.jsdossier.proto.Comment.TokenOrBuilder> tokenBuilder_;

    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public java.util.List<com.github.jsdossier.proto.Comment.Token> getTokenList() {
      if (tokenBuilder_ == null) {
        return java.util.Collections.unmodifiableList(token_);
      } else {
        return tokenBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public int getTokenCount() {
      if (tokenBuilder_ == null) {
        return token_.size();
      } else {
        return tokenBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public com.github.jsdossier.proto.Comment.Token getToken(int index) {
      if (tokenBuilder_ == null) {
        return token_.get(index);
      } else {
        return tokenBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public Builder setToken(
        int index, com.github.jsdossier.proto.Comment.Token value) {
      if (tokenBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTokenIsMutable();
        token_.set(index, value);
        onChanged();
      } else {
        tokenBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public Builder setToken(
        int index, com.github.jsdossier.proto.Comment.Token.Builder builderForValue) {
      if (tokenBuilder_ == null) {
        ensureTokenIsMutable();
        token_.set(index, builderForValue.build());
        onChanged();
      } else {
        tokenBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public Builder addToken(com.github.jsdossier.proto.Comment.Token value) {
      if (tokenBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTokenIsMutable();
        token_.add(value);
        onChanged();
      } else {
        tokenBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public Builder addToken(
        int index, com.github.jsdossier.proto.Comment.Token value) {
      if (tokenBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTokenIsMutable();
        token_.add(index, value);
        onChanged();
      } else {
        tokenBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public Builder addToken(
        com.github.jsdossier.proto.Comment.Token.Builder builderForValue) {
      if (tokenBuilder_ == null) {
        ensureTokenIsMutable();
        token_.add(builderForValue.build());
        onChanged();
      } else {
        tokenBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public Builder addToken(
        int index, com.github.jsdossier.proto.Comment.Token.Builder builderForValue) {
      if (tokenBuilder_ == null) {
        ensureTokenIsMutable();
        token_.add(index, builderForValue.build());
        onChanged();
      } else {
        tokenBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public Builder addAllToken(
        java.lang.Iterable<? extends com.github.jsdossier.proto.Comment.Token> values) {
      if (tokenBuilder_ == null) {
        ensureTokenIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, token_);
        onChanged();
      } else {
        tokenBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public Builder clearToken() {
      if (tokenBuilder_ == null) {
        token_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        tokenBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public Builder removeToken(int index) {
      if (tokenBuilder_ == null) {
        ensureTokenIsMutable();
        token_.remove(index);
        onChanged();
      } else {
        tokenBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public com.github.jsdossier.proto.Comment.Token.Builder getTokenBuilder(
        int index) {
      return getTokenFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public com.github.jsdossier.proto.Comment.TokenOrBuilder getTokenOrBuilder(
        int index) {
      if (tokenBuilder_ == null) {
        return token_.get(index);  } else {
        return tokenBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public java.util.List<? extends com.github.jsdossier.proto.Comment.TokenOrBuilder> 
         getTokenOrBuilderList() {
      if (tokenBuilder_ != null) {
        return tokenBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(token_);
      }
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public com.github.jsdossier.proto.Comment.Token.Builder addTokenBuilder() {
      return getTokenFieldBuilder().addBuilder(
          com.github.jsdossier.proto.Comment.Token.getDefaultInstance());
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public com.github.jsdossier.proto.Comment.Token.Builder addTokenBuilder(
        int index) {
      return getTokenFieldBuilder().addBuilder(
          index, com.github.jsdossier.proto.Comment.Token.getDefaultInstance());
    }
    /**
     * <code>repeated .dossier.Comment.Token token = 1;</code>
     *
     * <pre>
     * The tokens that comprise this comment.
     * </pre>
     */
    public java.util.List<com.github.jsdossier.proto.Comment.Token.Builder> 
         getTokenBuilderList() {
      return getTokenFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        com.github.jsdossier.proto.Comment.Token, com.github.jsdossier.proto.Comment.Token.Builder, com.github.jsdossier.proto.Comment.TokenOrBuilder> 
        getTokenFieldBuilder() {
      if (tokenBuilder_ == null) {
        tokenBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            com.github.jsdossier.proto.Comment.Token, com.github.jsdossier.proto.Comment.Token.Builder, com.github.jsdossier.proto.Comment.TokenOrBuilder>(
                token_,
                ((bitField0_ & 0x00000001) == 0x00000001),
                getParentForChildren(),
                isClean());
        token_ = null;
      }
      return tokenBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:dossier.Comment)
  }

  static {
    defaultInstance = new Comment(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:dossier.Comment)
}

